#!/usr/bin/env python
import os
import sys
import geojson
from geojson import Feature, LineString, FeatureCollection

# Add our parent folder to our path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import msgpack
import argparse
from curvature.geomath import Units
from curvature.output import OutputTools
from hashlib import sha1

parser = argparse.ArgumentParser(description='Output a geojson file listing segments.')
parser.add_argument('--units', type=str, default='mi', choices=['mi', 'km'], help='Distance units in the output, km or mi Default: mi')
args = parser.parse_args()

units = Units(args.units)

unpacker = msgpack.Unpacker(sys.stdin.buffer, use_list=True, encoding='utf-8')
tools = OutputTools('km')

output = FeatureCollection([])
sys.stdout.write('{"type": "FeatureCollection", "features": [\n')
first = True

for collection in unpacker:
    coords = []
    way_ids = []
    output_ways = []
    collection['name'] = tools.get_collection_name(collection)
    collection['curvature'] = int(tools.get_collection_curvature(collection))
    collection['surface'] = tools.get_collection_paved_style(collection)
    for way in collection['ways']:
        segments = way['segments']
        coords.append((segments[0]['start'][1], segments[0]['start'][0]))
        for segment in way['segments']:
            coords.append((segment['end'][1], segment['end'][0]))

        # The id will include by the way id and the starting ref as a single OSM
        # way might be split into multiple collections.
        way_ids.append("{}-{}".format(way['id'], way['refs'][0]))

        new_tags = {}
        if 'name' in way['tags']:
            new_tags['name'] = way['tags']['name']
        if 'ref' in way['tags']:
            new_tags['ref'] = way['tags']['ref']
        if 'surface' in way['tags']:
            new_tags['surface'] = way['tags']['surface']
        way['tags'] = new_tags
        del(way['segments'])
        del(way['coords'])
        del(way['refs'])

    hash = sha1()
    id_bytestring = ':'.join(map(str, way_ids)).encode('ascii')
    hash.update(id_bytestring)
    id = hash.hexdigest()


    feature = Feature(geometry=LineString(coords), id=id, properties=collection)
    if first:
        first = False
    else:
        # continue
        sys.stdout.write(",\n")
    sys.stdout.write(geojson.dumps(feature))
    # sys.stdout.write(geojson.dumps(feature, indent=1, separators=(',', ': ')))

sys.stdout.write("]}")
sys.stdout.write("\n")